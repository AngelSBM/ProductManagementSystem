@page "/customer-information/{customerId:int}"
@using CurrieTechnologies.Razor.SweetAlert2
@using ProductManagementSystem.Frontend.Components.Shared
@using ProductManagementSystem.Frontend.Services
@using ProductManagementSystem.Shared.DTOs
@using ProductManagementSystem.Shared.DTOs.Item


@inject ICustomerService customerService
@inject NavigationManager Navigation
@inject SweetAlertService Swal

<div class="card mx-auto" >
    <div class="card-body">

        <div class="row">
            <div class="col-6">
                <div class="mb-3">
                    <strong>ID:</strong> <span id="customer-id" readonly>@customer.Id</span>
                </div>
                <div class="mb-3">
                    <strong>Name:</strong> <span id="customer-name">@customer.Name</span>
                </div>
                <div class="mb-3">
                    <strong>Phone:</strong> <span id="customer-phone">@customer.Phone</span>
                </div>
            </div>
            <div class="col-6">
                <div class="mb-3">
                    <strong>Email:</strong> <span id="customer-email">@customer.Email</span>
                </div>
                <div class="mb-3">
                    <strong>Status:</strong>
                    <span id="customer-status" class="badge @(customer.Active ? "bg-success" : "bg-danger")">
                        @if (@customer.Active)
                        {
                            <span>Active</span>
                        }
                        else
                        {
                            <span>Inactive</span>
                        }
                    </span>
                </div>
            </div>
        </div>

    </div>

</div>

<div class="row">
    <div class="col-6">
        <h3 class="card-title text-left mt-4">Customer items</h3>
    </div>
    <div class="col-6 d-flex align-items-center justify-content-end">
        
        <button class="btn btn-primary align-self-end" type="button" @onclick="() => Modal.Open()">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
            </svg> Add item
        </button>
        
    </div>

</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Number</th>
            <th>Price</th>
            <th>Category</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (customer.Items is null)
        {
            <tr>
                <td colspan="5" align="center">
                    No items
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in customer.Items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Number</td>
                    <td>@item.Price</td>
                    <td>@item.Category.Name</td>
                    <td>
                        @if (@item.Active)
                        {
                            <span>Active</span>
                        }
                        else
                        {
                            <span>Inactive</span>
                        }
                    </td>
                    <td>

                        <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteCustomerItemAsync(item.Id)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                            </svg>
                        </button>

                        
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<Modal @ref="Modal" >
    <ItemsTable OnValueChanged="HandleValueChanged"></ItemsTable>
</Modal>


@code {
    [Parameter]
    public int CustomerId { get; set; } 
    public CustomerInfoDto customer = new();
    Modal Modal { get; set; }


    protected override async Task OnInitializedAsync()
    {        
        customer = await customerService.GetCustomerInformationAsync(CustomerId);
    }

    private async Task HandleValueChanged(ItemDto item)
    {
        var newCustomerItem = new CreateCustomerItemDto()
            {
                CustomerId = customer.Id,
                ItemId = item.Id
            };
        await customerService.CreateCustomerItemAsync(newCustomerItem);
        Modal.Close();

        customer.Items.Add(item);

        await Swal.FireAsync(new SweetAlertOptions()
        {
            Title = $"Item added for {customer.Name}",
            Icon = SweetAlertIcon.Success
        });

    }

    private async Task DeleteCustomerItemAsync(int itemId)
    {
        var swal = await Swal.FireAsync(new SweetAlertOptions()
            {
                Title = $"Are you sure you want to delete this item for this customer?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (swal.IsConfirmed)
        {
            await customerService.DeleteCustomerItemAsync(new DeleteCustomerItemDto()
            {
                CustomerId = customer.Id,
                ItemId = itemId
            });

            var itemToRemove = customer.Items.FirstOrDefault(x => x.Id == itemId)!;

            customer.Items.Remove(itemToRemove);
        }
    }

}
