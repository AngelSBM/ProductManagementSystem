@using ProductManagementSystem.Frontend.Services
@using ProductManagementSystem.Shared.DTOs.Item

@inject IItemService itemService;

<h3>Items Table</h3>

<input class="form-control" name="filter" @bind="filterText" @oninput="FilterData" type="text" placeholder="search item..." />

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Number</th>
            <th>Price</th>
            <th>Category</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (items is null)
        {
            <tr>
                <td colspan="5" align="center">
                    No items
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in filteredItems)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Number</td>
                    <td>@item.Price</td>
                    <td>@item.Category.Name</td>
                    <td>
                        @if (@item.Active)
                        {
                            <span>Active</span>
                        }
                        else
                        {
                            <span>Inactive</span>
                        }
                    </td>
                    <td>
                        <button type="button" class="btn btn-success btn-sm ms-2" @onclick="() => NotifyParent(item)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square-fill" viewBox="0 0 16 16">
                                <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0" />
                            </svg>
                        </button>

                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public EventCallback<ItemDto> OnValueChanged { get; set; }
    IEnumerable<ItemDto> items;
    IEnumerable<ItemDto> filteredItems;
    private string filterText = "";

    private void FilterData(ChangeEventArgs e)
    {
        filterText = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(filterText))
        {
            filteredItems = items.Where(p =>
                p.Name.ToLower().Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                p.Number.ToString().Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                p.Category.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        else
        {
            filteredItems = items; 
        }
    }

    protected override async Task OnInitializedAsync()
    {
        items = await itemService.GetItemsAsync();
        filteredItems = items;
    }

    private async Task NotifyParent(ItemDto itemDto)
    {
        await OnValueChanged.InvokeAsync(itemDto);
    }

}
