@page "/reports"
@using ProductManagementSystem.Frontend.Helpers
@using ProductManagementSystem.Frontend.Services
@using ProductManagementSystem.Shared.DTOs.Report

<div class="row">
    <div class="col-6">
        <h3>Report Dashboard</h3>        
    </div>
    <div class="col-6">
        <label class="form-label">Report type</label>
        <select class="form-select-sm" @onchange="SelectReportType">
            <option selected>--</option>
            <option value="@ReportType.ItemRange">Item number range</option>
            <option value="@ReportType.MostExpensiveItemPerCustomer">Most expensive items per customer</option>
        </select>
    </div>
</div>

<div class="p-2 mt-2 h-100" style="border-radius:4px; border: 1px solid gray">

    @if(selectedReportType == ReportType.ItemRange)
    {
        <div class="row">

            <EditForm Model="rangeReportDto">
                <div class="row">
                    <div class="col">
                        <label class="form-label"><strong>From item #</strong></label>
                        <InputNumber class="form-control" @bind-Value="rangeReportDto.ItemNumberFrom"></InputNumber>
                        <ValidationMessage For="() => rangeReportDto.ItemNumberFrom"></ValidationMessage>
                    </div>

                    <div class="col">
                        <label class="form-label"><strong>To item #</strong></label>
                        <InputNumber class="form-control" @bind-Value="rangeReportDto.ItemNumberTo"></InputNumber>
                        <ValidationMessage For="() => rangeReportDto.ItemNumberTo"></ValidationMessage>
                    </div>

                </div>              

            </EditForm>

        </div>
    }

    <div class="row mt-2 mb-2">
        <div class="col d-flex justify-content-end">
            <button class="btn btn-danger" @onclick="GenerateReport">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-text" viewBox="0 0 16 16">
                    <path d="M5 4a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1zm-.5 2.5A.5.5 0 0 1 5 6h6a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5M5 8a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1zm0 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1z" />
                    <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1" />
                </svg> Generate report
            </button>
        </div>
    </div>

    <div id="pdfContainer" style="margin-top: 20px;">
        @if (!string.IsNullOrEmpty(pdfUrl))
        {
            <iframe src="@pdfUrl" width="100%" height="600px"></iframe>
        }
    </div>

</div>


@code {
    @inject IReportService reportService;

    CreateCustomerItemRangeReportDto rangeReportDto = new();
    string pdfUrl;
    int selectedReportType;

    private async Task GenerateReport()
    {
        if (selectedReportType == ReportType.ItemRange)
        {
            var reportBytes = await reportService.GetItemRangeReport(rangeReportDto);
            pdfUrl = $"data:application/pdf;base64,{Convert.ToBase64String(reportBytes)}";            
        }

        if (selectedReportType == ReportType.MostExpensiveItemPerCustomer)
        {
            var reportBytes = await reportService.GetMostExpensiveItemsPerCustomerReport();
            pdfUrl = $"data:application/pdf;base64,{Convert.ToBase64String(reportBytes)}";
        }

    }

    void SelectReportType(ChangeEventArgs e)
    {
        selectedReportType = int.Parse(e.Value.ToString());        
        pdfUrl = "";
    }

}
